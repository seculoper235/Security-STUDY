*** SessionRegistry와 SessionRepository ***
세션은 서버에 저장되고 다뤄지는 것이므로, 세션을 다루기 위해선 세션을 CRUD 할 클래스들이 필요하다
이런 클래스들에는 크게 세션 등록 클래스(SessionRegistry)와 세션 레포지토리(SessionRepository)가 있다


** 세션 등록(SessionRegistry)
- 세션의 CRUD를 처리하는 클래스이며, 세션 ID와 세션 정보(Principal)를 별도로 보관하고 세션을 저장/제거/꺼내기 등의 역할을 한다
- 별도의 저장소(DB)를 구축하느냐에 따라, SessionRegistryImpl과 SpringSessionBackedSessionRegistry로 나뉜다

1. 스프링 시큐리티(DB 사용 안함)
- 스프링 시큐리티가 기본적으로 사용하는 클래스이다.
  따로 세션 저장소가 존재하지 않으며, 자료구조(ConcurrentMap, Map)에 세션을 넣고 사용한다

2. 별도의 DB 사용(Redis, memcached 등)
- 따로 구축한 DB를 세션 저장공간으로 사용할 때는 SpringSessionBackedSessionRegistry를 사용해야 한다

  // 왜?? //
  // SessionRegistryImpl은  레포지토리를 가지고 있지 않다.
  // 따라서 ~~Impl을 사용하게 되면, 세션은 DB에서 저장되고 관리되지만 실제로 세션을 처리하는 건 ~~Impl이 처리한다
  // 즉, 세션 자체는 Redis 용 Session인데, 정작 사용은 자료구조를 사용해서 세션 처리를 하는 것!!
  // 이것의 문제는 Redis를 사용한 Session의 변경/삭제에 있다
  // ~~Impl은 Repository가 없으므로, Registry 자체적으로 세션 이벤트를 받아서 세션을 변경하거나 삭제를 한다
  // 그런데 Redis는 Repository를 통해 수정/삭제하므로, Repository가 세션 이벤트를 받아서 처리한다
  // 따라서 RedisSession은 발급과 저장은 정상적으로 작동하나, 세션 변경/세션 삭제는 실행되지 않는다
  // 그래서 로그아웃이나 재접근을 하면, 세션이 삭제/변경되지 않고 그냥 계속 생성되기만 한다
  // max-session이 오류를 일으키는 것도 이 때문이다


** 세션 레포지토리(SessionRepository)
- 흔히 개발할 때 생성하는 그 레포지토리와 동일한 클래스이다.
- 역시나 별도의 DB를 구축할 때 사용하며, 각 DB 별로 맞는 레포지토리가 존재한다
- Redis의 경우 RedisSessionRepository와 RedisIndexedSessionRepository, 2가지가 존재한다

1. RedisSessionRepository
- 그냥 기본적으로 세션을 관리할 때 사용한다.
- 변경/삭제 등의 세션 이벤트는 존재하지 않으며, 직접 구현해야 한다.

2. RedisIndexedSessionRepository
- 웹 환경에서 SessionRepositoryFilter와 결합되서 사용된다. 세션은 왠만하면 직접 건드리는 것은 좋지 않으므로 대부분 Filter와 결합된 해당 클래스를 사용하며, Spring Security도 이것을 사용한다.
- 세션 이벤트에 의해 변경/삭제가 알아서 이뤄지며, 직접 구현할 필요가 없다.




