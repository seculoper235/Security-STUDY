*** Session과 Token 이란? ***
세션과 토큰이란 인증이 실제로 수행되는 방식이다. 앞선 OAuth와 Form-Based 인증과는 조금 다르다.



** 인증의 구조
인증은 크게 2가지로 나눠서 볼 수 있다. 인증을 어떤 형태로 받느냐와 실제로 어떻게 다뤄지느냐 이다.
1. 인증의 형태
사용자의 인증을 위한 정보를 어떻게 받을 것인지 결정하는 부분이다.
인증은 폼 형식으로 기반으로 ID/PW를 입력받을 수 있고, OAuth 형태로 인증을 받을 수도 있다.
지금껏 작성해온 인증은 사실 "인증의 형태를 어떻게 할지" 작성한 것이다.

2. 실제 인증의 진행
앞서 작성한 인증의 형태로 사용자 정보를 받았다고 하더라도, 그런 중요 정보(Credential)를 Raw하게 받을 순 없다.
즉, 비밀번호를 그대로 전송하거나 해서는 안된다는 것이다.
또한 사용자가 사이트를 이용할 때마다, 서버는 권한이 있는 사용자인지를 매번 확인하게 된다. 이때마다 ID/PW를 치거나 로그인을 한다면, 정말 최악일 것이다.
한번 인증이 진행이 됬다면, 그 다음부턴 인증을 쉽게하기 위한 출입 카드같은 것이 필요하다. 첫번째 인증이 됬다면 다음부턴 "나 이미 인증됐어!"라며 출입 카드만 내밀면 되는 것이다.
이러한 출입 카드와 같은 역할을 하는 것을 바로 "세션과 토큰"이다.



** 세션이란?
HTTP는 무상태성(Stateless)의 특성을 지닌다. 따라서 클라이언트의 이전 상태를 기억하지 못하므로, 서버는 세션을 발급하여 클라이언트를 구분하고 HTTP 상태를 유지한다
이 세션 ID는 클라이언트마다 모두 다르므로, 이것을 이용한 인증이 바로 세션 인증이다

1. 과정
첫 요청에 서버가 세션을 생성하여 내부 DB에 저장하고 클라이언트에게 발급한다
클라이언트는 발급받은 세션을 쿠키(Key-Value)에 저장한다
후에 필요하면 쿠키에 담긴 세션값을 담아서 서버에 요청하고, 서버가 이를 확인하고 응답한다

2. 장점?
사용이 간편하며, 서버도 인증하기 간편하다. 세션 ID를 받아서 비교하면 된다
세션 ID의 크기가 매우 작다. 따라서 쿠키에 저장하고 읽기/쓰기에 무리가 없다

3. 단점?
서버의 메모리에 부담이 많이 간다
- 세션을 관리할 시스템이 별도로 필요하다. 이 시스템이 장애가 일어나면 총체적 난국
- 세션은 서버 DB에 저장되므로 메모리를 많이 잡아먹으며, mem~이나 Redis로 따로 DB를 만들어 관리한다고 해도 관리가 매우 복잡해진다
많은 정보가 담길 수 없다
- 단지 세션 ID만 보내기 때문에 여러 정보(권한 등)을 넣을 수 없어 불편하고, 보안적으로도 위험하다



** 토큰이란?
세션을 사용하게 되면, HTTP의 장점중 하나인 무상태성(Stateless)이 깨진다. 클라이언트의 상태를 지속적으로 저장하고 있기 때문이다
하지만 토큰은 상태를 유지하지 않고, 인증에 필요한 정보만을 모아 만든 출입증이다. 말 그대로 특정 용도만을 위한 티켓이다

1. 과정
이건 그냥 토큰 기반 인증이다. 토큰을 주고받으며 인증하는 방식이다. 차이점이 있다면 서버에 저장하지 않는다
첫 요청에 서버가 토큰을 발급해준다.(서버에 저장X)
클라이언트 해당 토큰을 쿠키에 저장한다
후에 필요하면 HTTP 헤더(Authorization)에 토큰을 담아서 서버에 요청하고, 서버가 이를 확인하고 응답한다

2. 장점
상태를 유지하는게 아니므로, 서버에 저장할 필요가 없다. 즉, 서버의 메모리를 아낄 수 있다.
세션에 비해 안전하기 때문에, 권한이나 등 여러 정보를 넣어 만들 수 있다.

3. 단점
클라이언트에 무리가 간다
- 토큰엔 여러 정보가 들어가기 때문에 세션에 비해 매우 무겁다. 쿠키에 많은 토큰이 저장되어 읽기/쓰기를 한다면 꽤 무리가 갈 수 있다
서버의 성능이 좋아야 한다
- 서버의 메모리에는 무리가 없으나, 컴퓨팅에 문제가 있다. 단순 비교가 아닌 암호화 계산을 해서 인증하기 때문에, 성능이 좋아야 한다



** 결론 **
소규모로 간단한 애플리케이션을 만든다면 세션 인증을,
크기가 점점 커지고 서버에 무리가 많이 간다 싶으면 토큰 인증을 하는 것이 좋다