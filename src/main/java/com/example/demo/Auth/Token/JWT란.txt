*** JWT ***
1. Json Web Token의 약자로, Json 형식의 웹 토큰이다
- 클라이언트의 세션 상태를 저장하는 게 아니라, 필요한 정보를 토큰 body에 저장해 클라이언트가 가지고 있고 그것을 증명서처럼 사용한다


** JWT란?
- JSON Web Token의 약자로, 전자서명된 URL-safe의 JSON
- 속성 정보를 JSON 데이터 구조로 표현한 토큰
- 서버와 클라이언트 간 정보를 주고 받을 떄, HTTP request Header(요청 헤더)에 JSON 토큰을 넣어서 요청하면,
  서버는 별도의 인증과정없이 헤더에 포함되어 있는 토큰을 통해 인증
- JWT는 HMAC 알고리즘을 통해, 비밀키 또는 RSA를 이용한 공개키/비밀키 쌍으로 서명할 수 있다


** 구조
- 헤더, 페이로드, 시그니처 3 종류로 나뉜다

HHHHHH . PPPPPP . SSSSSS

HEADER
{
  "alg": "HS256",
  "typ": "JWT"
}

PAYLOAD
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}

SIGNATURE
HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  your-256-bit-secret
) secret base64 encoded(T or F)

Header
- Token 타입(jwt, jws 등)과 해시 암호화 알고리즘(HMAC/SHA256/RSA)으로 구성
- Base64Url로 되어있지만, 실제 데이터는 JSON 형태로 되어있음

Payload
- 토큰에 담을 Claim 정보(사용자 정보)를 포함. Payload에 담는 정보의 한 조각을 Claim이라 하고, key/value의 한 쌍으로 이뤄져 있다
- 토큰에는 여러개의 claim을 넣을 수 있다
- Header와 Payload는 Base64Url로 되어있기 때문에, 기본적으로 디코딩 가능

Signature
- scret key를 포함해 암호화되어 있음
- Header에 대한 Base64Url을 적용한 값과 Payload에 대한 Base64Url을 적용한 값들을 Header에 구성된 알고리즘을 적용한 결과값
=> secret key로 암호화(비밀키는 서버측에 존재)
- Header와 Payload가 변조됐는지 검증
- 역시 Base64Url로 되어있다


** 변조 가능성??
- Base64는 쉽게 디코딩 가능하지만, Secret Key 때문에 Payload는 조작 불가능하다


** 단점
- Payload와 Header의 변조 가능성을 막은 것이지, Payload의 정보 유출을 막은 것은 아니다
  따라서 문제가 될만한 정보를 Payload를 넣지 말자
  (JWE를 사용하면 Payload도 암호화할 수 있다. 하지만 이를 검증하기 위한 계산 비용과 토큰 크기는 커진다는 것을 잊지 말자!!)

- 토큰은 비밀키로 해싱된 것으로, 생성만 가능하다. 즉, 세션처럼 가져와서 수정/삭제가 불가능하다는 것이다
  따라서 수정/삭제를 하고 싶다면 "재발급"하는 방법 밖에는 없다
  재발급 타이밍은 만료 시간을 지정하고, 해당 시간이 지나면 토큰이 폐기되도록 해야한다

- 토큰은 Header와 Payload, 특히 Payload에 얼마나 많은 데이터를 넣냐에 따라 길이가 천차만별이다
  즉, 무한정 데이터를 넣을 수도 있다는 것이다. 이렇게되면 토큰의 크기가 커지고, 네트워크에 심각한 부하가 걸리니 주의하도록 하자!



** 토큰 생성 방법
- JWT은 JSON 구조이므로, 설정들이 모두 Key-Value 구조로 되어있다
  이러한 설정 하나하나(sub, name, iat 등)를 Claim 이라고 부르며, 이것을 기준으로 Payload를 설정한다
- 토큰 생성은 Jwts()의 빌더 패턴으로 설정할 수 있다

1. JWT 헤더 설정
  - signWith()로 사용할 알고리즘을 정한다. 타입은 당연히 JWT이므로 상관없다

2. JWT 페이로드 설정
  - 보통 Subject와 Authority, CreatedAt/ExpriatedAt을 설정한다
  - 각각 setSubject(), setIssuedAt()/setExpiration()으로 설정하며, Authority같은 일반 정보는 claim()/setClaims()로 설정한다

3. Signature(비밀키) 설정
  - signWith()에 알고리즘과 같이 설정한다