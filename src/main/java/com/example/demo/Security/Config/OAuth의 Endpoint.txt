/* authorizationEndpoint? */
// 인증 서버에서 Social 로그인 페이지를 요청하는 EndPoint이다.
// baseUri()를 설정하여 Social 로그인 페이지를 요청하는 URI를 설정할 수 있다.
// (기본적으로 /oauth2/authorization/{provider}로 정해져 있으며, 구글은 건드릴 필요 없다.)
/*.authorizationEndpoint()
    .baseUri("/oauth2/auth")
    .and()*/

/* RedirectionEndpoint? */
// 인증 서버에서 Social 로그인 성공 후, 본격적인 OAuth 인증을 어디서 처리할지 설정하는 EndPoint이다.
// baseUri()를 설정하여 redirect 페이지를 설정할 수 있다.
// 설정이 조금 까다로운데, properties 파일과 Social OAuth와 해당 Endpoint의 baseUri을 모두 설정해줘야 한다.
// (기본적으로 /login/oauth2/code/{provider}로 정해져 있으며, 구글은 건드릴 필요 없다.)
/*.redirectionEndpoint()
    .baseUri("/login/oauth2/redirect")
    .and()*/

/* tokenEndpoint? */
// 인증 서버에서 토큰을 처리하기 위한 Endpoint이다.
// RedirectionEndpint로부터 받은 authorization_code를 가지고 어플리케이션을 사용할 수 있는 access token을 발급한다.
/*.tokenEndpoint()
    .accessTokenResponseClient(???)
    .and()*/

/* userInfoEndpoint? */
// 현재 서버에서 사용자의 정보를 어떻게 다루기 위한 Endpoint이다.
// OAuth 인증이 끝난 사용자 정보의 DB 업데이트가 진행되는 역할을 맡는다.
// 여기서 바로 UserService를 사용하여 사용자를 등록/업데이트 할 수 있으며, 전달받은 OAuth 전용 객체를 Entity로 바꿔 저장하는 loadUser() 메소드가 사용된다.