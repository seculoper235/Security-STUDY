*** OAuth 인증이란? ***
OAuth 인증이란 Open Authentication의 약자로, 타사 서비스(Open API)를 이용하기 위해 해당 서버의 인증을 거치는 방식이다.
말 그대로 목적은 다른 서버의 Open API를 사용 하고자 함 이지만, 어떤 Open API를 이용하는지는 크게 2가지로 나눠진다.

** 1. Social 로그인 용도(로그인 API)
** 2. 로그인 외의 다른 API 사용(네이버 블로그 API, 구글 캘린더 API 등)

2번은 원하는 API를 사용하기 위해서 라지만, 1번은 왜 일까?


*** OAuth 로그인을 사용하는 이유? ***
애플리케이션에 OAuth 로그인을 도입하게 되면, 총 2번의 인증 과정을 거치게 된다.
1번째는 알다시피 Resource Server의 Owner 정보를 사용하기 위해 인증을,
2번째는 원래 애플리케이션의 인증, 이렇게 2번이다.
굳이 이렇게 복잡한 인증을 거쳐서라도 OAuth 인증을 채택하는 이유는
"보안성과 효율성" 때문이다.

로그인을 자체적으로 구현하다고 하면 고려할 것이 매우 많다.
자체적으로 로그인을 구현하면 form 방식의 데이터를 서버가 넘겨받게 될 텐데, 이 과정이 매우 불안정하다.
물론 암호화를 하고 어찌저찌 잘 구현해 볼 수 있겠으나, 어찌됬든 중요 정보가 노출된다는 사실은 변함없다.
또한 데이터는 어찌 관리할 것인가. 사용자의 중요 데이터를 DB에 직접 보관하게 될 텐데, 이것 역시 매우 불안하기 짝이 없다.
그리고 로그인 이라는 것은 많은 시간과 노력을 쏟아 붇기에는 우선순위가 떨어지기에, 효율성도 매우 떨어진다.

이러한 이유로 다른 대규모 서버의 인증을 대신 이용하는 것이다.
암만 보안에 치중을 해서 인증을 구현한다고 쳐봤자, 대규모 서비스의 보안에는 따라가지 못한다.


*** OAuth 로그인의 이점 ***
이런 OAuth 로그인을 사용하면 다음과 같은 이점이 있다.

** 1. raw한 정보의 노출이 없다!
- 직접 사용자의 인증 정보를 맡지않고, Social 서버에 로그인 처리를 맡기니 맘 편하기 그지없다. 그냥 access token만 받아오면 된다.

** 2. 중요 데이터를 직접 관리할 필요도 없다!
- 기본적으로 access token을 발급받아서 해당 토큰으로 Resource Server에서 사용자의 데이터를 가져온다.
  따라서 DB에 굳이 정보를 저장할 필요는 없다.
  (물론 필요에 따라, 애플리케이션에서 사용할 데이터(닉네임 등)을 입력받아 저장할 수는 있다. 하지만 직접적인 비밀번호 등의 중요 정보는 저장하진 않는다.)
